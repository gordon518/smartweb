<html class="no-js">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="ie=edge;chrome=1">
  <title>sessions and cookies in node | Nodejitsu Inc.</title>
  <meta name="description" content="Nodejitsu blog provides high quality articles about Node.JS, javascript and npm">
  <meta name="keywords" content="Node.JS,npm,node,javascript,js,blog,nodejitsu">
  <meta name="robots" content="follow,index">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="author" content="Nodejitsu Inc.">
  <link rel="shortcut icon" href="/assets/img/favicon.png">
  <link rel="stylesheet" href="/assets/css/jitsu.min.css">
  <link rel="canonical" href="http://blog.nodejitsu.com/sessions-and-cookies-in-node/">
  <script type="text/javascript" src="//use.typekit.net/gmp8svh.js"></script>
  <script type="text/javascript">
    try{ Typekit.load(); } catch (e) {}
    document.documentElement.className = '';
  </script>
  <meta name="generator" content="Ghost"><link rel="alternate" type="application/rss+xml" title="Nodejitsu Inc." href="/rss/">
</head>
<body class="container post-template">

<div class="hero">
  <header class="row site-head">
    <div class="site-head-content tencol">
      <h1>Nodejitsu</h1>
      <h2>Save time managing and deploying your node.js app</h2>
    </div>

    <a class="blog-logo right" href="http://blog.nodejitsu.com">
      <img src="/assets/img/logo.png" alt="Blog Logo">
    </a>
  </header>
</div>


<div class="subscribe">
  <a href="http://blog.nodejitsu.com/rss/">
    <s class="ss-social ss-rss"></s>
  </a>
</div>

<div id="announcement" class="row announcement gone">
  <section class="sixcol">
    <h1 class="row">
      <strong>Nodejitsu</strong> has joined <strong>GoDaddy</strong>
    </h1>

    <p class="row">
      We are excited to join GoDaddy to help spearhead their largest Node.js
      product: <a href="https://www.godaddy.com/hosting/website-builder.aspx">Website
      Builder</a>. Please read our blog post to learn more about customer
      transition plans and our continued support for Open Source within the
      node community.
    </p>

    <strong>Want to know all the details?</strong><br>
    <a class="row read" target="_blank" href="https://blog.nodejitsu.com/nodejitsu-joins-godaddy">Read the full blog post</a> or <a target="_blank" href="https://www.nodejitsu.com/company/press/2015/02/10/nodejitsu-joins-godaddy">read the GoDaddy Announcement.</a>
  </section>

  <img src="/assets/img/godaddy.png" class="sixcol last">

  <hr class="row">
</div>

<main class="row" role="main">
  <article class="post">

    <div class="row">
      <div class="eightcol">
        <h1 class="post-title">sessions and cookies in node</h1>
        <small class="post-meta">
          <time datetime="2010-11-26">
            26 Nov 2010
          </time>
          <span class="tags"></span>
        </small>

        <div class="row">
        <div class="social horizontal">
  <div class="fb-share-button" data-href="http://blog.nodejitsu.com" data-type="button_count"></div>

  <a href="https://news.ycombinator.com/submit" class="hn-button" data-title="Blog about Javascript, Node.JS and npm | Nodejitsu Inc." data-url="http://blog.nodejitsu.com" data-count="horizontal" data-style="facebook">
  Vote on Hacker News
  </a>

  <a href="https://twitter.com/share" class="twitter-share-button" data-via="nodejitsu" data-url="http://blog.nodejitsu.com"></a>
</div>

        </div>
      </div>

      <address class="author fourcol last">
        <h3>About the author</h3>
        <img src="http://gravatar.com/avatar/5e06172730feb43518e532efc9c46a51?d=identicon" class="fourcol">
        <div class="eightcol last">
          <dl class="twelvecol">
            <dt>Name</dt>
            <dd id="author">
              <a href="https://google.com/+Nodejitsu?rel=author" rel="author" target="_blank">
              Nodejitsu
              </a>
            </dd>
            <dt>Location</dt>
            <dd id="location">Worldwide</dd>
          </dl>
          <span id="github" class="sixcol">
            <s class="ss-icon ss-social ss-octocat"></s>
            <a href="https://github.com/nodejitsu">nodejitsu</a>
          </span>
          <span id="twitter" class="sixcol last">
            <s class="ss-icon ss-social ss-twitter"></s>
            <a href="https://twitter.com/nodejitsu">nodejitsu</a>
          </span>
        </div>
      </address>
    </div>

    <hr>

    <blockquote class="row gone animated widget">
      <h3>Other popular posts</h3>
      <section class="sixcol">
        <a href="/scaling-isomorphic-javascript-code/">
          - Scaling Isomorphic Javascript Code
        </a>
        <a href="/keep-a-nodejs-server-up-with-forever/">
          - Keep a node.js server up with Forever
        </a>
        <a href="/package-dependencies-done-right/">
          - Package.json dependencies done right
        </a>
      </section>
      <section class="sixcol last">
        <a href="/npm-cheatsheet/">
          - npm cheat sheet
        </a>
        <a href="/6-must-have-nodejs-modules">
          - 6 Must Have Node.js Modules
        </a>
      </section>
    </blockquote>

    <section class="row post-content">
      <p>Session management is a major piece of any serious web application. When building a site, it is likely you will want the ability to persist a user's identity over multiple requests without having to have them re-login again and again. A common method for persisting a user's login over multiple http requests, is called setting a "<a href="http://en.wikipedia.org/wiki/HTTP_cookie">cookie</a>". Now almost all web developers have some idea of what a cookie is, but in this article we will dive into the specifics of actually implementing a cookie / session persistence system from scratch in node.js through exploring the <a href="https://github.com/marak/session.js">session.js</a> library and the <a href="https://github.com/marak/response">response</a> library.</p>

<h2 id=""> </h2>

<p><br/></p>

<h1 id="gettingstarted">Getting Started</h1>

<p>First, we are going to need some logic for implementing session management. Crack JavaScript developer <a href="http://inimino.org/">inimino</a>  was nice enough to release the following <a href = "https://github.com/Marak/session.js/blob/master/lib/session.js">module</a>, so we will build on that. In this module, only one method is exported: "lookupOrCreate". If we dive into this method a little bit, we can see it takes two options, a request object and an options hash. </p>

<p>This "lookupOrCreate" method will inspect the headers of the incoming request object and determine if there is any value set for the cookie field ( note: the actual header name is "Set-Cookie", but node refers to this header as "cookie"). If lookupOrCreate finds a cookie, it will retrieve the session object from memory, else it will create a new session for that request. </p>

<p>Now, the tricky part here is that if we've created a new session, we need to set the cookie in the response header so the client knows it has a session. Unless we explicitly set a cookie in the response header, "lookupOrCreate" will never find your session cookie.</p>

<p>To set the cookie in the http response you can do something like:</p>

<pre><code> var session = sessions.lookupOrCreate(request,{
   lifetime:604800
 });

 response.writeHead(200, {
   'Content-Type': 'text/plain', 
   'Set-Cookie', session.getSetCookieHeaderValue()
 });
</code></pre>

<p>Even better then using response.write though, is using response.setHeader. This will not close the response, and allow for further manipulation down the request/response processing chain...kinda like a proper middle-ware!</p>

<pre><code> response.setHeader('Set-Cookie', session.getSetCookieHeaderValue());
</code></pre>

<h3 id="noteyouwillneedtheresponse4moduleforthistoworkitshouldbepulledintocoreeventually">Note: You will need the <a href="https://github.com/marak/response">response</a> module for this to work, it should be pulled into core eventually.</h3>

<p><br/></p>

<h1 id="creatingasupersimplesessionmiddleware">Creating a super simple session middle-ware</h1>

<p>In node.js, an accepted standard for building middleware is the following:</p>

<pre><code> function( request, response, callback) {

   // perform some logic on the request or response objects
   console.log(request.url);


   // then fire our callback, and pass the request 
   // and response objects down the chain
   callback(request, response, function(){

   });

 }
</code></pre>

<p>Following this standard, a "middle-ware" for node.js's httpServer is nothing but a function that accepts three arguments: a request object, a response object, and a callback. Building on this very simple convention, we can implement de-coupled layers of middleware, each with its own responsibility. In our case, our middleware will be responsible for establishing sessions!</p>

<p><br/>  </p>

<h1 id="getsessionjs2"><a href="https://github.com/marak/session.js">get session.js!</a></h1>

<p><br/></p>

<h1 id="usingsessionjsasamiddleware">Using session.js as a middle-ware</h1>

<pre><code>var http = require('http'),  
    session = require('./lib/core').session;

// let's create a basic http server!
http.createServer(function (request, response) {

  // before we process any part of the request, let's use the session middle-ware!
  session(request, response, function(request, response){

    // now we can access request.session

    // after the session middleware has executed, let's finish processing the request
    response.writeHead(200, {'Content-Type': 'text/plain'});
    response.write('request.session: \n' + JSON.stringify(request.session, 2, true));
    response.end();

  });

}).listen(8080);

/* server started */  
console.log('&gt; hello world running on port 8080');  
</code></pre>

<p><br/></p>

<h1 id="magicmonkeypunchedmiddlewaresessionsautomaticallypatcheshttpserver">Magic Monkey Punched Middle-ware Sessions (automatically patches httpServer)</h1>

<pre><code>var http = require('http'),  
    session = require('./lib/core').magicSession(); // special magic, now all requests have sessions!

// let's create a basic http server!
http.createServer(function (request, response) {

  // now we can access request.session

  // let's finish processing the request
  response.writeHead(200, {'Content-Type': 'text/plain'});
  response.write('request.session: \n' + JSON.stringify(request.session, 2, true));
  response.end();

}).listen(8080);

/* server started */  
console.log('&gt; hello world running on port 8080');  
</code></pre>

<p><br/></p>

<h1 id="creatingasupersimpleloginlogoutfeature">Creating a super simple login / logout feature</h1>

<p>One of the best things about having a persistent session object per user, is having the ability to create user logins. The actual way you want to implement your login is somewhat arbitrary. Here is a basic pattern to follow. Please, remember this method is just an example:</p>

<pre><code>    var http = require('http'),
        session = require('./lib/core').magicSession();

    // let's create a basic http server!
    http.createServer(function (request, response) {

      // please note: this is just an example of how to hook auth into session.js, its not ideal at all

      // super basic logout
      if(request.url === '/logout'){
        request.session.data.user = "Guest";
        response.writeHead(200, {'Content-Type': 'text/plain'});
        response.write('You\'ve been logged out');
        response.end();
        return;
      }

      // let's hardcode a username and password variable into the url
      var urlParams = require('url').parse(request.url, true).query || {};

      if(typeof urlParams.name != 'undefined'){
        // if the "name" parameter has been sent, lets log in as that user
        request.session.data.user = urlParams.name;
      }

      // request.session.data.user always defaults to "Guest"
      if(request.session.data.user == "Guest"){
        response.writeHead(200, {'Content-Type': 'text/plain'});
        response.write('Hello, you are the Guest user');
        response.end();
      }
      else{
        response.writeHead(200, {'Content-Type': 'text/plain'});
        response.write('Hello, you are ' + request.session.data.user);
        response.end();
      }


    }).listen(8080);

    /* server started */  
    console.log('&gt; hello world running on port 8080');
</code></pre>

<p>Once you have this running you can do the following:</p>

<pre><code>GET http://localhost:8080/
// returns: Hello, you are the Guest user

GET http://localhost:8080/?name=Marak
// returns: Hello, you are Marak

GET http://localhost:8080/
// returns: Hello, you are Marak

GET http://localhost:8080/logout
// returns: You've been logged out

GET http://localhost:8080 
// returns: Hello, you are the Guest user
</code></pre>

<p>Huzaah! There you go! <a href="https://github.com/marak/session.js">session.js</a> is open-source, so lets get hacking!</p>
<script type="cerebral/cortex">{ "author": "marak" }</script>
    </section>
  </article>
</main>

<footer class="doormat">
  <section class="row">
    <dl class="twocol">
      <dt>Company</dt>
      <dd>
        <a href="https://www.nodejitsu.com/" target="_blank">Nodejitsu.com</a>
      </dd>
    </dl>
    <dl class="twocol">
      <dt>Community</dt>
      <dd>
        <a href="https://blog.nodejitsu.com/" target="_blank">Blog</a>
      </dd>
    </dl>
    <dl class="twocol">
      <dt>Resources</dt>
      <dd>
        <a href="http://status.nodejitsu.com/" target="_blank">Service Status</a>
      </dd>
    </dl>

    <section class="newsletter twocol right last">
      <div data-pagelet="mailchimp"><form action="//nodejitsu.us2.list-manage.com/subscribe/post" method="POST" class="mailchimp">
  <fieldset>
    <legend>Stay connected, join our mailing list</legend>
    <input type="hidden" name="u" value="e4a7e45f759ae0d449c3ba923">
    <input type="hidden" name="id" value="31f76174d4">
    <input type="email" autocapitalize="off" autocorrect="off" placeholder="Your e-mail address" name="MERGE0" required>
    <div data-pagelet="submit"><button type="submit" name="submit-btn" class="call-to btn-icon right">
  subscribe
</button></div>
  </fieldset>
</form></div>
      <div data-pagelet="social"><ul class="social">
  <li>
    <a href="https://twitter.com/nodejitsu" class="ss-twitter ss-social-circle" title="Follow @nodejitsu on Twitter"></a>
  </li>
  <li>
    <a href="https://github.com/nodejitsu" class="ss-octocat ss-social-circle" title="Fork @nodejitsu on Github"></a>
  </li>
</ul></div>
      <div class="copyright right">
        &copy; 2015 - Design by Nodejitsu Inc.
      </div>
    </section>
  </section>

  <section class="credits row">Proudly published with <a class="icon-ghost" href="https://ghost.org">Ghost</a></section>
</footer>

<script type="cerebral/cortex">
{
  "nodejitsu": {
    "name": "Nodejitsu",
    "gravatar": "https://gravatar.com/avatar/5e06172730feb43518e532efc9c46a51?d=identicon",
    "github": "nodejitsu",
    "twitter": "nodejitsu",
    "location": "Worldwide",
    "plus": "101595764399410294964"
  },
  "indexzero": {
    "name": "Charlie Robbins",
    "gravatar": "https://gravatar.com/avatar/a9114dae66e945c664e67b955b2fe642?d=identicon",
    "github": "indexzero",
    "twitter": "indexzero",
    "location": "New York, NY",
    "plus": "103820365795185677947"
  },
  "3rd-eden": {
    "name": "Arnout Kazemier",
    "gravatar": "https://gravatar.com/avatar/aa4ee2d08ba6dfc206a09d099b51b5ef?d=identicon",
    "github": "3rd-Eden",
    "twitter": "3rdEden",
    "location": "Drachten, Netherlands",
    "plus": "111635500675029187264"
  },
  "andre": {
    "name": "André König",
    "gravatar": "https://gravatar.com/avatar/0402503d36fb7576dda860bf3acc46ed?d=identicon",
    "github": "akoenig",
    "twitter": "caiifr",
    "location": "Bremen, Germany",
    "plus": "AndréKönig"
  },
  "chjj": {
    "name": "Christopher Jeffrey",
    "github": "chjj",
    "gravatar": "https://gravatar.com/avatar/96160627de1a1c142b3b5f1058dff07f?d=identicon",
    "location": "Minnesota",
    "plus": "100889263522326862078"
  },
  "cronopio": {
    "name": "Daniel Aristizabal",
    "gravatar": "https://gravatar.com/avatar/40bb91192aa2e9064f3a48b5a7108ae1?d=identicon",
    "github": "cronopio",
    "twitter": "cronopio2",
    "location": "Bogota, Colombia",
    "plus": "112200479616182620037"
  },
  "jcrugzz": {
    "name": "Jarrett Cruger",
    "gravatar": "https://gravatar.com/avatar/54bf22038aefd2df507124c287bd37fa?d=identicon",
    "github": "jcrugzz",
    "twitter": "jcrugzz",
    "location": "Brooklyn, New York",
    "plus": "115799546618990596835"
  },
  "julianduque": {
    "name": "Julian Duque",
    "gravatar": "https://gravatar.com/avatar/5a980a0db0b246d92b279865d36ffa04?d=identicon",
    "github": "julianduque",
    "twitter": "julian_duque",
    "location": "Medellín, Colombia",
    "plus": "JulianDavidDuque"
  },
  "swaagie": {
    "name": "Martijn Swaagman",
    "gravatar": "https://gravatar.com/avatar/c84de3dfe1238dd614278a1e12f4c0ce?d=identicon",
    "github": "swaagie",
    "twitter": "swaagie",
    "location": "Ten Boer, Netherlands",
    "plus": "MartijnSwaagman"
  },
  "yawnt": {
    "name": "Gianluca Stivan",
    "gravatar": "https://gravatar.com/avatar/afddb09dcdc8eea4bf5362010f80a0af?d=identicon",
    "github": "yawnt",
    "twitter": "yawnt",
    "location": "Vicenza, Italy",
    "plus": "112348803027630210615"
  },
  "alexgorbatchev": {
    "name": "Alex Gorbatchev",
    "gravatar": "https://gravatar.com/avatar/a15c524f516ac52bfcc8a4c99dddd625?d=identicon",
    "github": "alexgorbatchev",
    "twitter": "alexgorbatchev",
    "location": "San Fracisco, CA",
    "plus": "AlexGorbatchev"
  },
  "kenperkins": {
    "name": "Ken Perkins",
    "gravatar": "https://gravatar.com/avatar/9e54dda6522717d8f5fffee5e63f46f4?d=identicon",
    "github": "kenperkins",
    "twitter": "kenperkins",
    "location": "Seattle, Washington",
    "plus": "106161674965311196781"
  },
  "anoemi": {
    "name": "Ana Hevesi",
    "gravatar": "https://gravatar.com/avatar/dea10d735edf271a0fa5f1157e2cc650?d=identicon",
    "github": "anoemi",
    "twitter": "anoemi",
    "location": "New York, New York"
  },
  "avianflu": {
    "name": "Charlie McConnell",
    "gravatar": "https://gravatar.com/avatar/ddf7ae05c3264bfd7ffab92301554dba?d=identicon",
    "github": "avianflu",
    "twitter": "Av1anFlu",
    "location": "San Francisco, CA"
  },
  "blakmatrix": {
    "name": "Farrin Reid",
    "gravatar": "https://gravatar.com/avatar/828672da44a727ae0ec82a366d89fe10?d=identicon",
    "github": "blakmatrix",
    "twitter": "blakmatrix",
    "location": "Seattle, WA"
  },
  "bmeck": {
    "name": "Bradley Meck",
    "gravatar": "https://gravatar.com/avatar/0b22453288cedbe28d53e89e0e0b793d?d=identicon",
    "github": "bmeck",
    "twitter": "bradleymeck",
    "location": "Austin, TX"
  },
  "coderarity": {
    "name": "Christian Howe",
    "gravatar": "https://gravatar.com/avatar/d27faf0a94fb70fab6c35aba93985235?d=identicon",
    "github": "coderarity",
    "twitter": "coderarity",
    "location": "Virginia"
  },
  "dominic": {
    "name": "Dominic Tarr",
    "gravatar": "https://gravatar.com/avatar/8225d7ca5e83a3f9f0bb89a61d5df72c?d=identicon",
    "github": "dominictarr",
    "twitter": "dominictarr",
    "location": "The Australian Wilderness"
  },
  "hij1nx": {
    "name": "Paolo Fragomeni",
    "gravatar": "https://gravatar.com/avatar/6bcb79d3b0118274938ce2fd8dd9adab?d=identicon",
    "github": "hij1nx",
    "twitter": "hij1nx",
    "location": "New York, NY"
  },
  "indutny": {
    "name": "Fedor Indutny",
    "gravatar": "https://gravatar.com/avatar/2e93f6a5438c2187cabafde2dd91f07f?d=identicon",
    "github": "indutny",
    "twitter": "indutny",
    "location": "Omsk, Russia"
  },
  "isaacs": {
    "name": "Isaac Z. Schlueter",
    "gravatar": "https://gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e?d=identicon",
    "github": "isaacs"
  },
  "jesusabdullah": {
    "name": "Josh Holbrook",
    "gravatar": "https://gravatar.com/avatar/8b1cdadd1804a128dced3531b89efc1d?d=identicon",
    "github": "jesusabdullah",
    "twitter": "jesusabdullah",
    "location": "Oakland, CA"
  },
  "justinlilly": {
    "name": "Justin Lilly",
    "gravatar": "https://gravatar.com/avatar/f160c4a5aa86fd7a062df77e832119f7?d=identicon",
    "github": "justinlilly",
    "location": "New York, NY"
  },
  "karolina": {
    "name": "Karolina Szczur",
    "gravatar": "https://gravatar.com/avatar/9dd6817ae3cd4093d6db7cd649836112?d=identicon",
    "github": "karolinaszczur",
    "twitter": "karolinaszczur",
    "location": "Krakow, Poland"
  },
  "marak": {
    "name": "Marak Squires",
    "gravatar": "https://gravatar.com/avatar/7972c616246ab60df7cbc374d4ef9d35?d=identicon",
    "github": "marak",
    "twitter": "marak",
    "location": "New York, NY"
  },
  "mmalecki": {
    "name": "Maciej Malecki",
    "gravatar": "https://gravatar.com/avatar/88980828020437cf9ec42c936d69e686?d=identicon",
    "github": "mmalecki",
    "twitter": "maciejmalecki",
    "location": "Poznan, Poland"
  },
  "nathan7": {
    "name": "Nathan Zadoks",
    "gravatar": "https://gravatar.com/avatar/f63957bf279ae780f8b617459f853c51?d=identicon",
    "github": "nathan7",
    "twitter": "FrozenFire",
    "location": "Hoofddorp, Netherlands"
  },
  "nico": {
    "name": "Nico Reed",
    "gravatar": "https://gravatar.com/avatar/26e6d5550fe873d942b40154ed10a0f8?d=identicon",
    "github": "nicoreed",
    "location": "San Jose, CA"
  },
  "nuno": {
    "name": "Nuno Job",
    "gravatar": "https://gravatar.com/avatar/04993e26e475bee537531aaa62d25974?d=identicon",
    "github": "dscape",
    "twitter": "dscape",
    "location": "Portugal"
  },
  "polotek": {
    "name": "Marco Rogers",
    "gravatar": "https://gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e?d=identicon",
    "github": "polotek"
  },
  "rkh": {
    "name": "Konstantin Haase",
    "gravatar": "https://gravatar.com/avatar/7b137a085971837fed1ad8cc6c341a39?d=identicon",
    "github": "rkh",
    "twitter": "konstantinhaase",
    "location": "Berlin"
  },
  "saadiq": {
    "name": "Saadiq Rodgers-King",
    "gravatar": "https://gravatar.com/avatar/c52947d288fe722b8fb65ca06941c4f6?d=identicon",
    "github": "saadiq",
    "twitter": "saadiq",
    "location": "New York, NY"
  },
  "sly": {
    "name": "Colton Baker",
    "gravatar": "https://gravatar.com/avatar/ad183de994051b83bc15c519db56db58?d=identicon",
    "github": "Southern",
    "twitter": "RogueSly",
    "location": "North Carolina"
  },
  "tmpvar": {
    "name": "Elijah Insua",
    "gravatar": "https://gravatar.com/avatar/2893bc1693002e652210b3705f74b5dd?d=identicon",
    "github": "tmpvar",
    "twitter": "tmpvar",
    "location": "Arizona"
  }
}
</script>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-24971485-1', 'auto');
  ga('send', 'pageview');
</script>

<script id="loader" data-load="/assets/js/cortex.min.js,/assets/js/prism.min.js,/assets/js/author.js,/assets/js/widget.js" data-plain="//connect.facebook.net/en_US/all.js#xfbml=1,//hn-button.herokuapp.com/hn-button.js,//platform.twitter.com/widgets.js" data-apps="analytics">
// Load our JavaScript files
!function loader(l,o,a,d,e,r) {
  d = l.getElementsByTagName(o)[0];
  a = [];

  // Append extra files that need to be loaded
  e = l.getElementById('loader');
  a = a.concat(
    e.getAttribute('data-load').split(','),
    e.getAttribute('data-plain').split(',')
  ).filter(Boolean);
  e = r = a.length;
  while (r--) {
    !function (w,t,f) {
      t = l.createElement(o);
      t.async = true;
      d.parentNode.insertBefore(t, d);

      t.onload = t.onerror = t.onreadystatechange = function () {
        if ((t.readyState && !(/^c|loade/.test(t.readyState))) || t.loaded) return;
        t.loaded = e--;

        // All files are loaded
        if (!e) {
          f = l.createEvent('CustomEvent');
          f.initCustomEvent('cortex', false, false, null);
          l.dispatchEvent(f);
          document.documentElement.className += ' cortex-loaded';
        }
      };

      t.src = w;
    }(a[r].replace(/\[type\]/, 'dev'));
  }
}(document, 'script');
</script>
