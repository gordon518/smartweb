var http = require("http");
var url = require("url");
var ejs = require('ejs');
var path=require('path');
var fs=require('fs');
var sessions=require('./session');

function route(pathname, req, res) {
	//console.log("smart:route() About to load the route of " + pathname);
	//first do the control
	var pathExtension=null;
	var lastDot=pathname.lastIndexOf('.');
	if(lastDot!=-1) {
		pathExtension = pathname.substring(lastDot+1);
		if(pathExtension=='do') {
			var controlPath=pathname.substr(0,lastDot);
			controlDispatcher(controlPath, req, res);
			return;
		}
	}
	//load the file at web folder
	var filePath="web/"+pathname;
	if(pathname=="" || pathname=="/") {
		if(fs.existsSync("web/index.ejs")) {
			filePath="web/index.ejs";
			pathExtension="ejs";
		}
		else if(fs.existsSync("web/index.htm")) {
			filePath="web/index.htm";
			pathExtension="htm";
		}
		else {
			console.log("Error: no index.ejs or index.htm in the folder of view");
			res.writeHead(404, {'Content-Type': 'text/html'});
			res.write("404 Not found, filePath="+filePath);
			res.end();
			return;
		}
	}

	//console.log("smart:route() About to load the file of " + filePath);
	fs.readFile(filePath, function (err, buf) {
		if (err) {
			console.log(err);
			// HTTP status code=404 : NOT FOUND
			res.writeHead(404, {'Content-Type': 'text/html'});
			res.end("404 Not found, filePath="+filePath);
		}else{	         
			// HTTP status code=200 : OK
			//res.writeHead(200, {'Content-Type': 'text/html'});
			var str=buf;
			switch(pathExtension){
                case "ejs":
                case "htm":
                case "html":
					res.writeHead(200, {"Content-Type": "text/html"});
					str=buf.toString('utf-8');
					//cut UTF8 BOM
					if (buf[0] === 0xEF && buf[1] === 0xBB && buf[2] === 0xBF) {
						buf = buf.slice(3);
					}
                    break;
                case "js":
                    res.writeHead(200, {"Content-Type": "text/javascript"});
                    break;
                case "css":
                    res.writeHead(200, {"Content-Type": "text/css"});
                    break;
                case "gif":
                    res.writeHead(200, {"Content-Type": "image/gif"});
                    break;
                case "jpg":
                    res.writeHead(200, {"Content-Type": "image/jpeg"});
                    break;
                case "png":
                    res.writeHead(200, {"Content-Type": "image/png"});
                    break;
                default:
                    res.writeHead(200, {"Content-Type": "application/octet-stream"});
			}
			if(pathExtension=="ejs") {
				var data={
					request: req,
					response: res
				};
				var ret = ejs.render(str,data);
				res.end(ret);
			}
			else {
				res.end(str);
			}
		}
	});
}

function controlDispatcher(controlPath, req, res) {
	console.log("smart:controlDispatcher() About to the controlPath of " + controlPath);
	try {
		//dynamically load the js file base on the url path
		var handler = require("../../controller/" + controlPath);
        //console.log("smart:route() selected handler: " + handler);

        //make sure we got a correct instantiation of the module
        //route to the right method in the module based on the HTTP action
        if(req.method.toLowerCase() == 'get' && typeof handler["get"] == 'function') {
            handler["get"](req, res);
            return;
        } else if (req.method.toLowerCase() == 'post' && typeof handler["post"] == 'function') {
            handler["post"](req, res);
            return;
        } else if (req.method.toLowerCase() == 'put' && typeof handler["put"] == 'function') {
            handler["put"](req, res);
            return;
        } else if (req.method.toLowerCase() == 'delete' && typeof handler["delete"] == 'function') {
            handler["delete"](req, res);
            return;
        }
    } catch(err) {
        console.log("smart:controlDispatcher() exception instantiating handler: " + err);
    }
    console.log("smart:controlDispatcher() No request handler found for " + controlPath);
    res.writeHead(404, {"Content-Type": "text/plain"});
    res.write("404 Not found");
    res.end();
}

function addSession(request, response, callback) {
	// inspect the current request and determine if we have a session for it 
	// sessions are determined by doing a lookup of request.headers["Set-Cookie"] against our sessions hash
	var session = sessions.lookupOrCreate(request,{
		lifetime:604800
	});
  
	// set the response header to set cookie for the current session
	// this is done so the client can pass along cookie information for subsequent requests
	response.setHeader('Set-Cookie', session.getSetCookieHeaderValue());
 
	// in addition to setting the response object, we will also set a new 
	// property on the request called "session", this is done so we can easily 
	// refer to the session object in other places
	request.session = session;

	// fire the callback to continue the request / response processing chain 
	callback( request, response );
}

exports.start=function(port) {
	if((!port) || (port==null))
		port=80;
	http.createServer(function (request, response) {
		// before we process any part of the request, let's give it a session!
		addSession(request, response, function(request, response) {
			// after the session middleware has executed, let's finish processing the request
			var pathname = url.parse(request.url).pathname;
			route(pathname, request, response);
		});
	}).listen(port);
	console.log("Server:Start() Server has started at port of "+port+".");
}

exports.showView=function(res, viewPath, data) {
	var filePath = path.resolve(__dirname, '../../view/'+viewPath);
	writeEjs(res, filePath, data);
}

exports.showWeb=function(res, webPath, data) {
	var filePath = path.resolve(__dirname, '../../web/'+webPath);
	writeEjs(res, filePath, data);
}

function writeEjs(res, filePath, data) {
	fs.readFile(filePath, function (err, buf) {
		if (err) {
			console.log("smart:showView() can't open the file of "+filePath+", err=" + err);
			// HTTP status code=404 : NOT FOUND
			res.writeHead(404, {'Content-Type': 'text/html'});
			res.write("404 Not found, filePath="+filePath);
		}else{	         
			// HTTP status code=200 : OK
			res.writeHead(200, { "Content-Type": "text/html" });
			//cut UTF8 BOM
			if (buf[0] === 0xEF && buf[1] === 0xBB && buf[2] === 0xBF) {
				buf = buf.slice(3);
			}
			var str=buf.toString('utf-8');
			var ret = ejs.render(str, data);
			res.write(ret);
		}
		res.end();
	});
}

function writeHtml(res, code, text) {
    res.writeHead(code, { "Content-Type": "text/html" });
    res.write(text);
    res.end();
}

